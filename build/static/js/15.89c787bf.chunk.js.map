{"version":3,"sources":["views/commun/TextField.js","views/essais/EssaiForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","map","option","key","value","id","nom","component","style","position","color","fontSize","BasicForms","match","useEffect","fetch","process","then","response","json","setAllTestTypes","setAllInstitutions","params","setDataForEdit","useState","file","myFile","setMyFile","dataForAPI","typeEssai","institution","fichier","motsCles","pdf","setDataForAPI","dataForAPIref","useRef","current","dataForEdit","allTestTypes","allInstitutions","React","isActive","status","message","alert","setAlert","validate","Yup","max","required","latitude","longitude","altitude","commentaire","departement","commune","sectionCommunale","handleChange","event","currentTarget","files","target","callback","reader","FileReader","readAsDataURL","onload","result","onerror","console","log","getBase64","substr","indexOf","initialValues","commume","enableReinitialize","validationSchema","onSubmit","values","Promise","resolve","reject","format","capacite","size","state","requestOptions","method","headers","body","JSON","stringify","data","setTimeout","formik","closeButton","xs","sm","autoComplete","row","md","accept","onChange","variant"],"mappings":"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","file":"static/js/15.89c787bf.chunk.js","sourcesContent":["import React from 'react';\nimport { CSelect,\n    CInputFile, CLabel,CCol} from '@coreui/react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, type, options, ...props}) => {\n    const [ field, meta] = useField(props);\n    return (\n        <div className=\"mb-2\" >\n            <label htmlFor={field.name}>{label}</label>\n            {type == \"textarea\" ?\n            <textarea \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            placeholder=\"Veuillez entrer la description...\"\n            rows=\"6\"\n            {...field} {...props}\n            ></textarea>:\n            type == \"select\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option.id}>{option.nom}</option>\n                    })}      \n            </CSelect>:\n        //     type == \"file\" ?\n        //     <CCol xs=\"12\" md=\"12\">\n        //      <CInputFile custom id=\"custom-file-input\" />\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n        //     Choisir fichier...\n        //     </CLabel>\n        //     </CCol>\n        //    :\n            <input \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}\n            />\n            }\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\n            \n        </div>\n    )\n}","import React ,{useState, useEffect, useRef} from 'react'\nimport {Formik, Form} from 'formik';\nimport { TextField } from '../commun/TextField';\nimport * as Yup from 'yup';\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CFormText,\n  CRow,\n  CAlert,\n  CLabel,CInputFile\n} from '@coreui/react'\n\nconst BasicForms = ({match}) => {\n\n  useEffect(() => {\n    //__START fetch all test types for the select field\n      fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`)\n        .then((response) => response.json())\n        .then((json) => setAllTestTypes(json))\n    //__END fetch all test types for the select field\n\n    //__START fetch all test types for the select field\n      fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`)\n      .then((response) => response.json())\n      .then((json) => setAllInstitutions(json))\n    //__END fetch all test types for the select field\n\n   if( match.params.id ){\n    fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id)\n      .then((response) => response.json())\n      .then((json) => setDataForEdit(json))   \n   }\n  }, []);\n\n  const initVal ={\n    typeEssai:'',\n    institution:'',\n    latitude:'',\n    longitude:'',\n    altitude:'',\n    departement:'',\n    commume:'',\n    sectionCommunale:'',\n    commentaire:'',\n    motsCles:'',\n    pdf:'',\n\n  }\n  const [myFile, setMyFile] = useState({file:null});//for the file\n  const onFileChange = event => {\n    // Update the state\n    setMyFile({file: event.target.files[0]}); \n    };\nconst init = {\n  typeEssai: {\n    id:null\n},\ninstitution: {\n    id:null\n},\nposition: {\n    id:null\n},\nfichier: {\n    id:null\n},\nmotsCles: '',\npdf:''\n}\n  const [dataForAPI = init, setDataForAPI, refDataForAPI] = useState();\n  const dataForAPIref = useRef(dataForAPI);\n  useEffect(\n    () => { dataForAPIref.current = dataForAPI },\n    [dataForAPI]\n  )\n\n  const imgRef = useRef(null);\n\n  const [dataForEdit, setDataForEdit] = useState(null);\n  const [allTestTypes, setAllTestTypes] = useState([]);\n  const [allInstitutions, setAllInstitutions] = useState([]);\n  const [alert, setAlert] = React.useState({ \n    isActive: false, status: '', message: '',})\n\n  const validate = Yup.object({\n    typeEssai: Yup.string()\n      .max(45,\"Maximum 45 caractères\")\n      .required(\"Champs obligatoire\"),\n    institution: Yup.string()\n      .max(45,\"Maximum 45 caractères\")\n      .required(\"Champs obligatoire\"),\n    latitude: Yup.number(\"Entrer un nombre\")\n      .max(99999999,\"Maximum 255 caractères\")\n      .required(\"Champs obligatoire\"),\n    longitude:  Yup.number(\"Entrer un nombre\")\n      .max(99999999,\"Maximum 255 caractères\")\n      .required(\"Champs obligatoire\"),\n    altitude:  Yup.number(\"Entrer un nombre\")\n      .max(99999999,\"Maximum 255 caractères\")\n      .required(\"Champs obligatoire\"),\n    commentaire: Yup.string()\n      .max(255,\"Maximum 255 caractères\"),\n    motsCles: Yup.string()\n    .max(255,\"Maximum 255 caractères\"),\n    departement: Yup.string()\n    .max(255,\"Maximum 255 caractères\")\n    .required(\"Champs obligatoire\"),\n    commune: Yup.string()\n    .max(255,\"Maximum 255 caractères\")\n    .required(\"Champs obligatoire\"),\n    sectionCommunale: Yup.string()\n    .max(255,\"Maximum 255 caractères\")\n    .required(\"Champs obligatoire\"),\n    // fichier: Yup.string()\n    //   .max(255,\"Maximum 255 caractères\")\n    //   .required(\"Champs obligatoire\"),\n  })\n  \n\n//  const toBase64 = file => new Promise((resolve, reject) => {\n//   const reader = new FileReader();\n//   reader.readAsDataURL(file);\n//   reader.onload = () => resolve(reader.result);\n//   reader.onerror = error => reject(error);\n// });\n\n// const toBase64 = (file,callback) => {\n//   const reader = new FileReader();\n//   // reader.addEventListener('load',()=>callback(reader.result.substr(reader.result.indexOf(',') + 1)));\n//   reader.readAsDataURL(file);\n// // var base64result = reader.result.substr(reader.result.indexOf(',') + 1);\n//   reader.onloadend = () => {\n//     setDataForAPI({...dataForAPI, pdf:reader.result.substr(reader.result.indexOf(',') + 1)})\n//   }\n// }\n\nconst getBase64 = (file, callback) => {\n  let reader = new FileReader();\n  reader.readAsDataURL(file);\n  reader.onload = () => {\n    callback(reader.result);\n  };\n  reader.onerror = (error) => {\n    console.log(\"Error: \", error);\n  };\n};\n\nconst handleChange = (event) => {\n  const file = event.currentTarget.files[0];\n  setMyFile({file: event.target.files[0]});//for just getting the name outside of the function\n  getBase64(file, (result) => {\n    setDataForAPI({...dataForAPI, pdf:result.substr(result.indexOf(',') + 1)})\n \n  });\n};\n\n  return (\n    <Formik\n      initialValues = {\n        dataForEdit || initVal\n      }\n      enableReinitialize\n      validationSchema= {validate}\n      onSubmit={values => {\n        function first(){\n          return new Promise(function(resolve, reject){\n              console.log(\"First\");\n              // toBase64(myFile.file, (base64String)=>{\n              // })\n              resolve();\n          });\n      }\n      \n      function second(){\n          return new Promise(function(resolve, reject){\n              console.log(\"Second\");\n              setDataForAPI({\n                typeEssai: {\n                  id:values.typeEssai\n              },\n              institution: {\n                  id:values.institution\n              },\n              position: {\n                  // id:5,\n                  latitude:values.latitude,\n                  longitude:values.longitude,\n                  altitude:values.altitude,\n                  departement:values.departement,\n                  commune:values.commune,\n                  sectionCommunale:values.sectionCommunale\n              },\n              fichier: {\n                  id:1,\n                  nom:myFile.file.name,\n                  format: myFile.file.type,\n                  capacite:myFile.file.size\n              },\n              motsCles: values.motsCles,\n              pdf:dataForAPI.pdf\n            })\n            setDataForAPI((state) => {\n              console.log(state); // \"React is awesome!\"\n              \n              return state;\n            });\n            \n              resolve();\n          });\n      }\n      \n      function third(){\n        // console.log(dataForAPI)\n          return new Promise(function(resolve, reject){\n              console.log(\"Third\");\n              const requestOptions = {\n                method: match.params.id ?'PUT':'POST',\n                headers: { 'Content-Type': 'application/json',\n                'Accept': 'application/json'},\n                body: JSON.stringify(dataForAPIref.current)\n            };\n            \n            //check if it is POST or PUT\n            if(match.params.id){\n              fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id, requestOptions)\n                .then(response => response.json())\n                .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n            }else{\n              // console.log(requestOptions.body)\n                fetch(`${process.env.REACT_APP_API_URL}/api/essais`, requestOptions)\n                .then(response => response.json())\n                // fetch(`${process.env.REACT_APP_API_URL}/api/essais`,\n                //   {\n                //     method: 'POST',\n                //     body: values,\n                //   }\n                // )\n                // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\n                // .catch((error) => {\n                //   console.error('Error:', error);\n                // });\n              }\n              resolve();\n          });\n      }\n      first()\n      .then(second)\n      .then(third);\n\n\n\n          //console.log(values)\n      //     function myfunction() {\n      //       longfunctionfirst(shortfunctionsecond);\n      //   }\n      //   myfunction();\n\n      //   function longfunctionfirst(callback) {\n      //     toBase64(myFile.file, (base64String)=>{\n      //       console.log('======1')\n            \n      //     setDataForAPI({\n      //       typeEssai: {\n      //         id:values.typeEssai\n      //     },\n      //     institution: {\n      //         id:values.institution\n      //     },\n      //     position: {\n      //         id:42\n      //     },\n      //     fichier: {\n      //         id:1\n      //     },\n      //     motsCles: values.motsCles,\n      //     // pdf:base64String\n      //   })\n      //   console.log(dataForAPI)\n      //   callback();\n      //   })\n      // }\n      //     //  toBase64(myFile.file)\n      //     // .then((result) => {\n      //     //   // console.log(result)\n      //     //   setDataForAPI({\n      //     //     typeEssai: {\n      //     //       id:values.typeEssai\n      //     //   },\n      //     //   institution: {\n      //     //       id:values.institution\n      //     //   },\n      //     //   position: {\n      //     //       id:42\n      //     //   },\n      //     //   fichier: {\n      //     //       id:1\n      //     //   },\n      //     //   motsCles: values.motsCles,\n      //     //   //pdf:result\n      //     // });\n      //     // })\n      //     // .then(res => {\n      //     //   // console.log(dataForAPI)\n      //     //   console.log(dataForAPI)\n      //     // })\n        \n        \n         \n   \n      // // values.pdf=getBase64(myFile.file);\n      //   // Create an object of formData\n      //   // const formData = new FormData();\n      //   // formData.append('typeEssai', values.typeEssai);\n      //   // formData.append('institution', values.institution);\n      //   // formData.append('latitude', values.latitude);\n      //   // formData.append('longitude', values.longitude);\n      //   // formData.append('altitude', values.altitude);\n      //   // formData.append('motsCles', values.motsCles);\n      //   // formData.append('commentaire', values.commentaire);\n      //   //.............\n      // //   formData.append('file', myFile.file);\n      // //   formData.append('essai', new Blob([JSON.stringify({\n      // //     \"typeEssai\": Number(values.typeEssai),\n      // //     \"institution\": values.institution,\n      // //     \"latitude\": values.latitude,\n      // //     \"longitude\": values.longitude,\n      // //     \"altitude\": values.altitude,\n      // //     \"motsCles\": values.motsCles,\n      // //     \"commentaire\": values.commentaire\n      // // })], {\n      // //         type: \"application/json\"\n      // //     }));\n      // function shortfunctionsecond() {\n      //   console.log('======2')\n      //     const requestOptions = {\n      //       method: match.params.id ?'PUT':'POST',\n      //       headers: { 'Content-Type': 'application/json',\n      //       'Accept': 'application/json'},\n      //       body: JSON.stringify(dataForAPI)\n      //   };\n        \n      //   //check if it is POST or PUT\n      //   if(match.params.id){\n      //     fetch(`${process.env.REACT_APP_API_URL}/api/essais/`+match.params.id, requestOptions)\n      //       .then(response => response.json())\n      //       .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n      //   }else{\n      //     // console.log(requestOptions.body)\n      //       fetch(`${process.env.REACT_APP_API_URL}/api/essais`, requestOptions)\n      //       .then(response => response.json())\n      //       // fetch(`${process.env.REACT_APP_API_URL}/api/essais`,\n      //       //   {\n      //       //     method: 'POST',\n      //       //     body: values,\n      //       //   }\n      //       // )\n      //       // .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}))\n      //       // .catch((error) => {\n      //       //   console.error('Error:', error);\n      //       // });\n      //     }\n      //   }\n     \n            setTimeout(() => {\n              setAlert({...alert, isActive: false, message:''})\n            }, 4000)\n      }}\n    >\n      { formik => (\n        <div>\n       <Form>\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\n          <CRow>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur l'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                          <TextField  label=\"Type d'essai*:\" name=\"typeEssai\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer le type d'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer le type d'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Institution*:\" name=\"institution\" \n                         type=\"select\" options={allInstitutions} placeholder=\"Entrer l'institution\" />\n                        <CFormText className=\"help-block\">Veuillez entrer l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Latitude*:\" name=\"latitude\" \n                        type=\"text\" placeholder=\"Entrer la latitude\" autoComplete=\"latitude\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer la latitude (ex: 76.23)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Longitude*:\" name=\"longitude\" \n                        type=\"text\" placeholder=\"Entrer la longitude\" autoComplete=\"longitude\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer la longitude (ex: -127.89)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Altitude*:\" name=\"altitude\" \n                        type=\"text\" placeholder=\"Entrer l'altitude\" autoComplete=\"altitude\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer l'altitude (ex: 45)</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField  label=\"Département*:\" name=\"departement\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer le département de l'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer le département de l'essai</CFormText>\n                      </CFormGroup>\n                    </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur l'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>  \n                    <CFormGroup>\n                          <TextField  label=\"Commune*:\" name=\"commune\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer la commune de l'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer la commune de l'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField  label=\"Section communale*:\" name=\"sectionCommunale\" \n                          type=\"select\" options={allTestTypes} placeholder=\"Entrer la section communale de l'essai...\"/>\n                          <CFormText className=\"help-block\">Veuillez entrer la section communale de l'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Mots clés:\" name=\"motsCles\" \n                        type=\"textarea\" placeholder=\"Entrer les mots clés\" autoComplete=\"motsCles\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer les mots clés</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Commentaires:\" name=\"commentaire\" \n                        type=\"textarea\" placeholder=\"Entrer les commentaires\" autoComplete=\"commentaire\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer un commentaire</CFormText>\n                      </CFormGroup>\n                      {/* <CFormGroup >\n                        <TextField label=\"Fichier:\" name=\"fichier\" \n                        type=\"file\" placeholder=\"Entrer le fichier\" autoComplete=\"fichier\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer le fichier (Max: 2 MB)</CFormText>\n                      </CFormGroup>  */}\n                      <CFormGroup row>{}\n                      <CCol xs=\"12\" md=\"12\">\n                        <input  id=\"custom-file-input\" \n                        // onChange={onFileChange}\n                        type=\"file\" \n                        accept=\"application/pdf, \n                        application/vnd.ms-excel\"     \n                        onChange={(event) => handleChange(event)}\n                          />\n                        <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n                           {myFile.file? myFile.file.name:'Choisir un fichier...'}\n                        </CLabel>\n                     \n                      </CCol>\n                    </CFormGroup>     \n                    </CCardBody>\n                    <CCardFooter>\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\">{match.params.id ? 'Modifier': 'Enregistrer'} </button>\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\n                    </CCardFooter>\n              </CCard>\n            </CCol>\n          </CRow>\n       </Form>\n        </div>    \n      )\n      }\n    </Formik>   \n  )\n}\nexport default BasicForms\n"],"sourceRoot":""}
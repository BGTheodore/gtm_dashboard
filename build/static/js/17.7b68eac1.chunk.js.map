{"version":3,"sources":["views/commun/TextField.js","views/test_types/TestTypeForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","map","option","key","value","id","nom","component","style","position","color","fontSize","BasicForms","match","useEffect","params","fetch","process","then","response","json","setDataForEdit","useState","dataForEdit","React","isActive","status","message","alert","setAlert","validate","Yup","max","required","sigle","description","initialValues","enableReinitialize","validationSchema","onSubmit","values","console","log","requestOptions","method","headers","body","JSON","stringify","data","setTimeout","formik","closeButton","xs","sm","autoComplete"],"mappings":"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","file":"static/js/17.7b68eac1.chunk.js","sourcesContent":["import React from 'react';\nimport { CSelect,\n    CInputFile, CLabel,CCol} from '@coreui/react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, type, options, ...props}) => {\n    const [ field, meta] = useField(props);\n    return (\n        <div className=\"mb-2\" >\n            <label htmlFor={field.name}>{label}</label>\n            {type == \"textarea\" ?\n            <textarea \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            placeholder=\"Veuillez entrer la description...\"\n            rows=\"6\"\n            {...field} {...props}\n            ></textarea>:\n            type == \"select\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option.id}>{option.nom}</option>\n                    })}      \n            </CSelect>:\n        //     type == \"file\" ?\n        //     <CCol xs=\"12\" md=\"12\">\n        //      <CInputFile custom id=\"custom-file-input\" />\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n        //     Choisir fichier...\n        //     </CLabel>\n        //     </CCol>\n        //    :\n            <input \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}\n            />\n            }\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\n            \n        </div>\n    )\n}","import React ,{useState, useEffect} from 'react'\nimport {Formik, Form} from 'formik';\nimport { TextField } from '../commun/TextField';\nimport * as Yup from 'yup';\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CFormText,\n  CRow,\n  CAlert\n} from '@coreui/react'\n\nconst BasicForms = ({match}) => {\n\n  useEffect(() => {\n   if( match.params.id ){\n    fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`+match.params.id)\n      .then((response) => response.json())\n      .then((json) => setDataForEdit(json))\n      \n   }\n  }, []);\n\n  const initVal ={\n    nom: '',\n    sigle:'',\n    description:'',\n  }\n  const [dataForEdit, setDataForEdit] = useState(null);\n  const [alert, setAlert] = React.useState({ \n    isActive: false, status: '', message: '',})\n\n  const validate = Yup.object({\n    nom: Yup.string()\n      .max(45,\"Maximum 45 caractères\")\n      .required(\"Champs obligatoire\"),\n    sigle: Yup.string()\n    .max(45,\"Maximum 45 caractères\"),\n    description: Yup.string()\n      .max(255,\"Maximum 255 caractères\"),\n        \n  })\n  \n  return (\n    <Formik\n      initialValues = {\n        dataForEdit || initVal\n      }\n      enableReinitialize\n      validationSchema= {validate}\n      onSubmit={values => {\n       console.log(values)\n          const requestOptions = {\n            method: match.params.id ?'PUT':'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(values)\n        };\n        \n        //check if it is POST or PUT\n        if(match.params.id){\n          fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`+match.params.id, requestOptions)\n            .then(response => response.json())\n            .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n        }else{\n            fetch(`${process.env.REACT_APP_API_URL}/api/type_essais/`, requestOptions)\n            .then(response => response.json())\n            .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n          }\n\n            setTimeout(() => {\n              setAlert({...alert, isActive: false, message:''})\n            }, 4000)\n      }}\n    >\n      { formik => (\n        <div>\n       <Form>\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\n          <CRow>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur le type de d'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                          <TextField  label=\"Nom*:\" name=\"nom\" \n                          type=\"text\" placeholder=\"Entrer le nom du type d'essai...\"\n                           autoComplete=\"nom\"                       \n                           />\n                          <CFormText className=\"help-block\">Veillez entrer le nom du type d'essai</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Sigle:\" name=\"sigle\" type=\"text\" placeholder=\"Entrer l'abbréviation du type d'essai..\" autoComplete=\"sigle\"/>\n                        <CFormText className=\"help-block\">Veillez entrer l'abbréviation du type d'essai</CFormText>\n                      </CFormGroup> \n                    </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur le type d'essai   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>  \n                      <CFormGroup>\n                        <TextField label=\"Description:\" type=\"textarea\" name=\"description\"  placeholder=\"Entrer la description de téléphone...\" autoComplete=\"description\"/>\n                        <CFormText className=\"help-block\">Veillez entrer la description de l'institution</CFormText>\n                      </CFormGroup>      \n                    </CCardBody>\n                    <CCardFooter>\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\">{match.params.id ? 'Modifier': 'Enregistrer'} </button>\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\n                    </CCardFooter>\n              </CCard>\n            </CCol>\n          </CRow>\n       </Form>\n        </div>    \n      )\n      }\n    </Formik>   \n  )\n}\nexport default BasicForms\n"],"sourceRoot":""}
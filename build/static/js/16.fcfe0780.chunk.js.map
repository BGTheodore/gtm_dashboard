{"version":3,"sources":["views/commun/TextField.js","views/institutions/InstitutionForm.js"],"names":["TextField","label","type","options","props","useField","field","meta","className","htmlFor","name","touched","error","placeholder","rows","map","option","key","value","id","nom","component","style","position","color","fontSize","BasicForms","match","useEffect","params","fetch","process","then","response","json","setDataForEdit","useState","dataForEdit","React","isActive","status","message","alert","setAlert","validate","Yup","max","required","sigle","adresse","telephone1","email","initialValues","telephone2","siteWeb","numeroFiscal","description","enableReinitialize","validationSchema","onSubmit","values","console","log","requestOptions","method","headers","body","JSON","stringify","data","setTimeout","formik","closeButton","xs","sm","autoComplete"],"mappings":"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","file":"static/js/16.fcfe0780.chunk.js","sourcesContent":["import React from 'react';\nimport { CSelect,\n    CInputFile, CLabel,CCol} from '@coreui/react';\nimport { ErrorMessage, useField } from 'formik';\n\nexport const TextField = ({label, type, options, ...props}) => {\n    const [ field, meta] = useField(props);\n    return (\n        <div className=\"mb-2\" >\n            <label htmlFor={field.name}>{label}</label>\n            {type == \"textarea\" ?\n            <textarea \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            placeholder=\"Veuillez entrer la description...\"\n            rows=\"6\"\n            {...field} {...props}\n            ></textarea>:\n            type == \"select\" ?\n            <CSelect name={label}\n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}>\n                 { options.map((option, key) => {              \n                    return <option key={key} value={option.id}>{option.nom}</option>\n                    })}      \n            </CSelect>:\n        //     type == \"file\" ?\n        //     <CCol xs=\"12\" md=\"12\">\n        //      <CInputFile custom id=\"custom-file-input\" />\n        //     <CLabel htmlFor=\"custom-file-input\" variant=\"custom-file\">\n        //     Choisir fichier...\n        //     </CLabel>\n        //     </CCol>\n        //    :\n            <input \n            className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid' }`}\n            {...field} {...props}\n            />\n            }\n            <ErrorMessage component=\"div\" name={field.name} style={{position: \"absolute\", color:\"red\", fontSize: \".6rem\"} }/>\n            \n        </div>\n    )\n}","import React ,{useState, useEffect} from 'react'\nimport {Formik, Form} from 'formik';\nimport { TextField } from '../commun/TextField';\nimport * as Yup from 'yup';\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CFormGroup,\n  CFormText,\n  CRow,\n  CAlert\n} from '@coreui/react'\n\nconst BasicForms = ({match}) => {\n\n  useEffect(() => {\n   if( match.params.id ){\n    fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`+match.params.id)\n      .then((response) => response.json())\n      .then((json) => setDataForEdit(json))\n      \n   }\n  }, []);\n\n  const initVal ={\n    nom: '',\n    sigle:'',\n    adresse:'',\n    telephone1:'',\n    telephone2:'',\n    email:'',\n    siteWeb:'',\n    numeroFiscal:'',\n    description:'',\n  }\n  const [dataForEdit, setDataForEdit] = useState(null);\n  const [alert, setAlert] = React.useState({ \n    isActive: false, status: '', message: '',})\n\n  const validate = Yup.object({\n    nom: Yup.string()\n    .max(45,\"Maximum 45 caractères\")\n    .required(\"Champs obligatire\"),\n    sigle: Yup.string()\n    .max(45,\"Maximum 45 caractères\"),\n    adresse: Yup.string()\n    .max(45,\"Maximum 45 caractères\")\n    .required(\"Champs obligatire\"),\n    telephone1: Yup.string()\n      .max(15,\"Maximum 15 caractères\")\n      .required(\"Champs obligatire\"),\n    telephone1: Yup.string()\n      .max(15,\"Maximum 15 caractères\"),\n    email: Yup.string()\n      .email(\"Email invalide\")\n      .required(\"Champs obligatire\"),\n    siteWeb: Yup.string()\n      .max(45,\"Maximum 45 caractères\"),\n    numeroFiscal: Yup.string()\n      .max(45,\"Maximum 45 caractères\")\n      .required(\"Champs obligatire\"),\n    description: Yup.string()\n      .max(255,\"Maximum 255 caractères\"),\n        \n  })\n  \n  return (\n    <Formik\n      initialValues = {\n        dataForEdit || initVal\n      }\n      enableReinitialize\n      validationSchema= {validate}\n      onSubmit={values => {\n       console.log(values)\n          const requestOptions = {\n            method: match.params.id ?'PUT':'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(values)\n        };\n        \n        //check if it is POST or PUT\n        if(match.params.id){\n          fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`+match.params.id, requestOptions)\n            .then(response => response.json())//to do:TEST IF SUCCES first\n            .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n        }else{\n            fetch(`${process.env.REACT_APP_API_URL}/api/institutions/`, requestOptions)\n            .then(response => response.json())\n            .then(data =>   setAlert({ ...alert,isActive: true, message: \"Opération réussie !\"}));\n          }\n\n            setTimeout(() => {\n              setAlert({...alert, isActive: false, message:''})\n            }, 4000)\n      }}\n    >\n      { formik => (\n        <div>\n       <Form>\n       { alert.isActive ?  <CAlert color=\"info\" closeButton>{alert.message}</CAlert> : ''}\n       <CRow>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur l'institution   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                          <TextField label=\"Nom*:\" name=\"nom\" \n                          type=\"text\" placeholder=\"Entrer le nom de l'institution...\" \n                          autoComplete=\"nom\" \n                          />\n                          <CFormText className=\"help-block\">Veuillez entrer le nom de l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField label=\"Sigle:\" name=\"sigle\" \n                          type=\"text\" placeholder=\"Entrer le sigle de l'institution...\" \n                          autoComplete=\"sigle\" \n                          />\n                          <CFormText className=\"help-block\">Veuillez entrer le sigle de l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Adresse*:\" name=\"adresse\" type=\"text\" placeholder=\"Entrer l'adresse de l'institution..\" autoComplete=\"adresse\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer l'adresse de l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Téléphone 1:\" name=\"telephone1\" type=\"text\" placeholder=\"Entrer un numéro de téléphone...\" autoComplete=\"telephone1\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer un numéro de téléphone de l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Téléphone 2:\" name=\"telephone2\" type=\"text\" placeholder=\"Entrer un auntre numéro de téléphone...\" autoComplete=\"telephone2\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer un autre numéro de téléphone de l'institution</CFormText>\n                      </CFormGroup>\n                    </CCardBody>\n              </CCard>\n            </CCol>\n            <CCol xs=\"12\" sm=\"6\">\n              <CCard>\n                  <CCardHeader>\n                  Informations sur l'institution   {  match.params.id}\n                 </CCardHeader>\n                    <CCardBody>\n                      <CFormGroup>\n                        <TextField label=\"Email*:\" name=\"email\" type=\"text\" placeholder=\"Enter l'email de l'institution...\" autoComplete=\"email\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer l'email de l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                          <TextField label=\"Site web:\" name=\"siteWeb\" type=\"text\" placeholder=\"Entrer le site web de l'institution...\" autoComplete=\"siteWeb\" />\n                          <CFormText className=\"help-block\">Veuillez entrer le site web de l'institution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Numéro social:\" name=\"numeroFiscal\" type=\"text\" placeholder=\"Entrer le numéro social de l'institution..\" autoComplete=\"numeroFiscal\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer le numéro social de l'intitution</CFormText>\n                      </CFormGroup>\n                      <CFormGroup>\n                        <TextField label=\"Description:\" type=\"textarea\" name=\"description\" placeholder=\"Entrer la description de téléphone...\" autoComplete=\"description\"/>\n                        <CFormText className=\"help-block\">Veuillez entrer la description de l'institution</CFormText>\n                      </CFormGroup>      \n                    </CCardBody>\n                    <CCardFooter>\n                      <button className=\"btn btn-dark mt-3\" type=\"submit\">{match.params.id ? 'Modifier': 'Enregistrer'} </button>\n                      <button className=\"btn btn-danger mt-3 ml-3\" type='reset'>Réinitialiser</button>\n                    </CCardFooter>\n              </CCard>\n            </CCol>\n          </CRow>\n       </Form>\n        </div>    \n      )\n      }\n    </Formik>   \n  )\n}\nexport default BasicForms\n"],"sourceRoot":""}